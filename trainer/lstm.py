import pandas as pd
from keras.layers import Dense, Dropout, LSTM, Embedding
from keras.models import Sequential
from sklearn.model_selection import train_test_split


def load_data():
    train = pd.read_csv("./Data/train/random_train_data.csv",
                        header=None,
                        sep=",",
                        error_bad_lines=False)
    label = pd.read_csv("./Data/train/random_train_label.csv",
                        sep=',',
                        header=0,
                        usecols=['category'])

    print(train.shape)
    print(label.shape)
    # test = pd.read_csv("./Data/test/test.csv", header=None, sep="|", names=['row_data'], error_bad_lines=False)

    X_train, X_test, y_train, y_test = train_test_split(train,
                                                        label,
                                                        test_size=0.2,
                                                        random_state=42)
    # Success
    print("Training and testing split was successful.")
    print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)

    return X_train, X_test, y_train, y_test


def create_model(input_length):
    print('Creating model...')
    model = Sequential()
    model.add(Embedding(input_dim=188, output_dim=50, input_length=input_length))
    model.add(
        LSTM(output_dim=8,
             activation='sigmoid',
             inner_activation='hard_sigmoid',
             return_sequences=True))
    model.add(Dropout(0.5))
    model.add(LSTM(output_dim=8, activation='sigmoid', inner_activation='hard_sigmoid'))
    model.add(Dropout(0.5))
    model.add(Dense(1, activation='sigmoid'))

    print('Compiling...')
    model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
    return model


load_data()

X_train, X_test, y_train, y_test = load_data()

model = create_model(len(X_train[0]))

print('Fitting model...')
hist = model.fit(X_train, y_train, batch_size=64, nb_epoch=10, validation_split=0.1, verbose=1)

score, acc = model.evaluate(X_test, y_test, batch_size=1)
print('Test score:', score)
print('Test accuracy:', acc)
