from pickle import load
from numpy import array
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.utils.vis_utils import plot_model
from keras.models import Model
from keras.layers import Input
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers import Embedding, BatchNormalization
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D, AveragePooling1D
from keras.layers.merge import concatenate
from sklearn.model_selection import train_test_split
import csv
import pandas as pd
import numpy as np
from keras.callbacks import TensorBoard, EarlyStopping


# define the model
def EnsembleCNN(length, vocab_size):
    # channel 1
    inputs1 = Input(shape=(length,))
    embedding1 = Embedding(vocab_size, 8)(inputs1)
#     conv1 = Conv1D(filters=32, kernel_size=32, strides=32, padding='same',activation='relu')(embedding1)
#     drop1 = Dropout(0.5)(conv1)
#     pool1 = MaxPooling1D(pool_size=8)(drop1)
#     flat1 = Flatten()(pool1)
    conv1 = Conv1D(filters=32, kernel_size=400, strides=400, padding='same',activation='relu')(embedding1)
    flat1 = Flatten()(conv1)
    drop1 = Dropout(0.2)(flat1)
    # channel 2
    inputs2 = Input(shape=(length,))
    embedding2 = Embedding(vocab_size, 8)(inputs2)
#     conv2 = Conv1D(filters=32, kernel_size=64, strides=64, padding='same',activation='relu')(embedding2)
#     drop2 = Dropout(0.5)(conv2)
#     pool2 = MaxPooling1D(pool_size=8)(drop2)
#     flat2 = Flatten()(pool2)
    conv2 = Conv1D(filters=32, kernel_size=500, strides=500, padding='same',activation='relu')(embedding2)
    flat2 = Flatten()(conv2)
    drop2 = Dropout(0.2)(flat2)
    # channel 3
    inputs3 = Input(shape=(length,))
    embedding3 = Embedding(vocab_size, 8)(inputs3)
#     conv3 = Conv1D(filters=32, kernel_size=128, strides=128, padding='same',activation='relu')(embedding3)
#     drop3 = Dropout(0.5)(conv3)
#     pool3 = MaxPooling1D(pool_size=8)(drop3)
#     flat3 = Flatten()(pool3)
    conv3 = Conv1D(filters=32, kernel_size=600, strides=600, padding='same',activation='relu')(embedding3)
    flat3 = Flatten()(conv3)
    drop3 = Dropout(0.2)(flat3)
    # merge
#     merged = concatenate([flat1, flat2, flat3])
    merged = concatenate([drop1, drop2, drop3])
    # interpretation
    dense1 = Dense(128, activation='relu')(merged)
    outputs = Dense(1, activation='sigmoid')(dense1)
    return Model(inputs=[inputs1, inputs2, inputs3], outputs=outputs)


def EnsembleCNNV2(length, vocab_size):
    input = Input(shape=(length,))

    # Embedding layer
    embedding = Embedding(vocab_size, 8)(input)

    # channel 1
    conv1 = Conv1D(filters=32, kernel_size=64, strides=64, padding='same',activation='relu')(embedding)
    conv1normal = BatchNormalization()(conv1)
    pool1 = MaxPooling1D(pool_size=8)(conv1normal)
    flat1 = Flatten()(pool1)
    drop1 = Dropout(0.1)(flat1)
    
    # channel 2
    conv2 = Conv1D(filters=32, kernel_size=128, strides=128, padding='same',activation='relu')(embedding)
    conv2normal = BatchNormalization()(conv2)
    pool2 = MaxPooling1D(pool_size=8)(conv2normal)
    flat2 = Flatten()(pool2)
    drop2 = Dropout(0.1)(flat2)
    
    # channel 3
    conv3 = Conv1D(filters=32, kernel_size=256, strides=256, padding='same',activation='relu')(embedding)
    conv3normal = BatchNormalization()(conv3)
    pool3 = MaxPooling1D(pool_size=8)(conv3normal)
    flat3 = Flatten()(pool3)
    drop3 = Dropout(0.1)(flat3)
    
    # channel 4
    conv4 = Conv1D(filters=32, kernel_size=512, strides=512, padding='same',activation='relu')(embedding)
    conv4normal = BatchNormalization()(conv4)
    pool4 = MaxPooling1D(pool_size=8)(conv4normal)
    flat4 = Flatten()(pool4)
    drop4 = Dropout(0.1)(flat4)

    merged = concatenate([drop1, drop2, drop3, drop4])

    # FC layers
    dense1 = Dense(512, activation='relu')(merged)
    dense1normal = BatchNormalization()(dense1)
    dropdense1 = Dropout(0.2)(dense1normal)

    dense2 = Dense(128, activation='relu')(dropdense1)
    dense2normal = BatchNormalization()(dense2)
    dropdense2 = Dropout(0.2)(dense2normal)

    output = Dense(1, activation='sigmoid')(dropdense2)
    return Model(inputs=input, outputs=output)
