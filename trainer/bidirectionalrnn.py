from keras.layers import Dense, Dropout, SimpleRNN, LSTM, Embedding, Bidirectional
from keras.models import Sequential


def BidirectionalSimpleRNN(length, vocab_size):
    model = Sequential()
    
    # embedding
    model.add(Embedding(vocab_size, 8, input_length=length, mask_zero=True))
    
    model.add(Bidirectional(SimpleRNN(50, activation='tanh', use_bias=True, 
                                                   kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', 
                                                   kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, 
                                                   kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, 
                                                   dropout=0.2, recurrent_dropout=0.0, 
                                                   return_sequences=False, return_state=False, 
                                                   go_backwards=False, stateful=False, unroll=False)))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    return model

def BidirectionalLSTM(length, vocab_size):
    model = Sequential()
    
    # embedding
    model.add(Embedding(vocab_size, 8, input_length=length, mask_zero=True))
    
    model.add(Bidirectional(LSTM(50, activation='tanh', recurrent_activation='hard_sigmoid', use_bias=True, 
                                 kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', 
                                 unit_forget_bias=True, 
                                 kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, activity_regularizer=None, 
                                 kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, 
                                 dropout=0.0, recurrent_dropout=0.0, implementation=1, 
                                 return_sequences=False, return_state=False, 
                                 go_backwards=False, stateful=False, unroll=False)))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    return model
