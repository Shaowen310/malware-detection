# %% [markdown]
# ## Plot PE Header length distribution - Test data
# Credit: [@MengdanCode](https://github.com/MengdanCode)
# %%
from data import read_data_file, read_label_file
import numpy as np
from matplotlib import pyplot as plt

data_file = "./Data/train/train.csv"
label_file = "./Data/train/train_label.csv"

X = read_data_file(data_file)
y = read_label_file(label_file)

# %%
X_len = []
for i in X:
    X_len.append(len(i))

print('X_len generated')

X_len = np.array(X_len)

print(X_len.min())
print(X_len.max())

fig_per_hour = plt.figure()
per_hour = fig_per_hour.add_subplot(111)
counts, bins, patches = per_hour.hist(X_len, bins=100, normed=False, color='g', linewidth=0)
plt.gca().set_xlim(X_len.min(), X_len.max())
plt.show()

# %% [markdown]
# ### Print extremely long file details:
# %%
for l in range(len(X)):
    if (len(X[l]) > 8192):
        print('index: ', l, ' length: ', len(X[l]), 'corresponding label is: ', y[l])

# %% [markdown]
# ## Plot PE Header length distribution - Test data

# %%
from data import read_data_file, read_label_file
import numpy as np
import matplotlib.pyplot as plt

test_file = "./Data/test/test.csv"
testX = read_data_file(test_file)

# %%
test_X_len = []
for i in testX:
    test_X_len.append(len(i))

print('X_len generated')

test_X_len = np.array(test_X_len)

# ints = np.random.random_integers(0,1440,15000)
print(test_X_len.min())
print(test_X_len.max())

fig_per_hour = plt.figure()
per_hour = fig_per_hour.add_subplot(111)
counts, bins, patches = per_hour.hist(test_X_len, bins=100, normed=False, color='g', linewidth=0)
plt.gca().set_xlim(test_X_len.min(), test_X_len.max())
plt.show()

# %% [markdown]
# ### Print extremely long file details:

# %%
for l in range(len(testX)):
    if (len(testX[l]) > 8192):
        print('index: ', l, ' length: ', len(testX[l]))

# %% [markdown]
# # Extract Header

# %%
import csv
import pandas as pd
import numpy as np


def read_data_file(data_file_path):
    with open(data_file_path, 'rU') as f:
        data = list(list(map(lambda x: int(x), row)) for row in csv.reader(f, delimiter=','))

    return data


def read_label_file(label_file_path):
    df = pd.read_csv(label_file_path, sep=',', header=0, usecols=['category'])
    return df.values


def extract_label(in_file_path, out_file_path, short_index):
    y = read_label_file(in_file_path)
    output = pd.DataFrame(data=y)
    output.drop(short_index, axis=0)
    output.to_csv(out_file_path, index=False, header=False)


def extract_header(in_file_path, out_file_path, skip_flag=True):
    BASE = 0
    DOS_HEADER_LEN = 64
    DOS_STUB_LEN = 14

    DOS_header = []
    PE_header = []
    Sec_header = []

    PE_header_len_list = []
    Sec_header_len_list = []

    raw_data = read_data_file(in_file_path)

    short_index = []
    index = -1
    print('data processing started ...')
    for i in raw_data:
        index += 1
        # Remove data smaller than 97 bytes, not a PE file
        if (skip_flag and len(i) < 97):
            print('Too short data with length: ', len(i), ' index is: ', index,
                  '  .... skipping......')
            short_index.append(index)
            continue
        # 0 - 78 fixed length
        temp_DOS = i[BASE:DOS_HEADER_LEN + DOS_STUB_LEN]
        DOS_header.append(temp_DOS)

        # Locate PE Pointer in DOS header (60, 61, 62, 63)
        PE_pointer = temp_DOS[DOS_HEADER_LEN - 4:DOS_HEADER_LEN]
        # print('PE_pointer ', PE_pointer)
        PE_header_offset = PE_pointer[0] + PE_pointer[1] * 256 + PE_pointer[2] * (
            256**2) + PE_pointer[3] * (256**3)
        # print('PE_header_offset ', PE_header_offset)

        # Locate PE Header section by PE Header offset
        PE_signature = i[PE_header_offset:PE_header_offset + 4]
        PE_file_header = i[PE_header_offset + 4:PE_header_offset + 24]

        # Locate Section Header number in PE file header and calculate section header length
        Sec_num_pointer = PE_file_header[2:4]
        # print(Sec_num_pointer)
        Sec_num = Sec_num_pointer[0] * 256 + Sec_num_pointer[1]
        Sec_header_len = Sec_num * 40

        # Locate Optional header length in PE file header
        Opt_header_hex = PE_file_header[16:18]
        Opt_header_len = Opt_header_hex[0] + Opt_header_hex[1] * 256

        # Calculate Section Header offset by PE header length
        Sec_header_offset = PE_header_offset + 24 + Opt_header_len

        # Get PE optional header by PE_header offset
        PE_opt_header = i[PE_header_offset + 24:Sec_header_offset]

        # Concatenate PE sigature, PE file header and PE optional header
        temp_PE = list()
        temp_PE.extend(PE_signature)
        temp_PE.extend(PE_file_header)
        temp_PE.extend(PE_opt_header)
        # print('temp_PE ', temp_PE)
        PE_header.append(temp_PE)

        PE_header_len_list.append(len(temp_PE))

        temp_Sec_header = i[Sec_header_offset:Sec_header_offset + Sec_header_len]

        # truncate section header, only take the first 40bit
        trunc_sec_header = []
        for j in range(Sec_num):
            trunc_sec_header.extend(temp_Sec_header[j * 40:j * 40 + 12])
        Sec_header.append(trunc_sec_header)

        Sec_header_len_list.append(len(trunc_sec_header))

    print('PE_header_max_len: ', max(PE_header_len_list))
    print('Sec_header_max_len: ', max(Sec_header_len_list))

    return PE_header_len_list, Sec_header_len_list


print("Extract train.csv ")
train_PE_header_len_list, train_Sec_header_len_list = extract_header(
    "./Data/train/train.csv", "./Data/train/train_extract.csv", skip_flag=True)

# %% [markdown]
# ## Plot train PE Header lenth distribution
# %%
train_PE_header_len_list = np.array(train_PE_header_len_list)

# ints = np.random.random_integers(0,1440,15000)
print(train_PE_header_len_list.min())
print(train_PE_header_len_list.max())

fig_per_hour = plt.figure()
per_hour = fig_per_hour.add_subplot(111)
counts, bins, patches = per_hour.hist(train_PE_header_len_list,
                                      bins=5,
                                      normed=False,
                                      color='g',
                                      linewidth=0)
plt.gca().set_xlim(200, 350)
plt.show()

# %% [markdown]
# ## Plot train Section Header length distribution
# %%
from matplotlib import pyplot as plt

train_Sec_header_len_list = np.array(train_Sec_header_len_list)

# ints = np.random.random_integers(0,1440,15000)
print(train_Sec_header_len_list.min())
print(train_Sec_header_len_list.max())

fig_per_hour = plt.figure()
per_hour = fig_per_hour.add_subplot(111)
counts, bins, patches = per_hour.hist(train_Sec_header_len_list,
                                      bins=100,
                                      normed=False,
                                      color='g',
                                      linewidth=0)
plt.gca().set_xlim(train_Sec_header_len_list.min(), train_Sec_header_len_list.max())
plt.show()

# %%
for l in range(len(train_Sec_header_len_list)):
    if (train_Sec_header_len_list[l] > 3552):
        print('index: ', l, ' length: ', train_Sec_header_len_list[l])

# %%
print("Extract test.csv ")
test_PE_header_len_list, test_Sec_header_len_list = extract_header("./Data/test/test.csv",
                                                                   "./Data/test/test_extract.csv",
                                                                   skip_flag=False)

# %%
test_PE_header_len_list = np.array(test_PE_header_len_list)

# ints = np.random.random_integers(0,1440,15000)
print(test_PE_header_len_list.min())
print(test_PE_header_len_list.max())

fig_per_hour = plt.figure()
per_hour = fig_per_hour.add_subplot(111)
counts, bins, patches = per_hour.hist(test_PE_header_len_list,
                                      bins=5,
                                      normed=False,
                                      color='g',
                                      linewidth=0)
plt.gca().set_xlim(test_PE_header_len_list.min(), test_PE_header_len_list.max())
plt.show()

# %%
for l in range(len(test_PE_header_len_list)):
    if (test_PE_header_len_list[l] > 352):
        print('index: ', l, ' length: ', test_PE_header_len_list[l])

# %%
test_Sec_header_len_list = np.array(test_Sec_header_len_list)

# ints = np.random.random_integers(0,1440,15000)
print(test_Sec_header_len_list.min())
print(test_Sec_header_len_list.max())

fig_per_hour = plt.figure()
per_hour = fig_per_hour.add_subplot(111)
counts, bins, patches = per_hour.hist(test_Sec_header_len_list,
                                      bins=100,
                                      normed=False,
                                      color='g',
                                      linewidth=0)
plt.gca().set_xlim(test_Sec_header_len_list.min(), test_Sec_header_len_list.max())
plt.show()

# %%
for l in range(len(test_Sec_header_len_list)):
    if (test_Sec_header_len_list[l] > 1480):
        print('index: ', l, ' length: ', test_Sec_header_len_list[l])

# %%
